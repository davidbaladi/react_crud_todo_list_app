{"ast":null,"code":"import React, { useState, useEffect, useRef } from \"react\";\nimport \"../styles/todo-app.css\";\n\nconst TodoApp = () => {// const [input, setInput] = useState(\"\");\n  // const [todos, setTodos] = useState([]);\n  // const [todoId, setTodoId] = useState(0);\n  // const [editTodo, setEditTodo] = useState(null);\n  // const [editingText, setEditingText] = useState(\"\");\n  // const [focus, setFocus] = useState(true);\n  // const inputRef = useRef(null);\n  // console.log(inputRef);\n  // useEffect(() => {\n  //   if (todos.length > 20) {\n  //     alert(\n  //       \"WOW! You have a lot on your plate... Thx for testing out my App :)\"\n  //     );\n  //   }\n  // });\n  // useEffect(() => {\n  //   if (focus === true) inputRef.current.focus();\n  // });\n  // //text from Child\n  // const setET = (text) => {\n  //   setEditingText(text);\n  // };\n  // useEffect(() => {\n  //   console.log(\"componentDidMount\");\n  //   const loadedTodos = JSON.parse(localStorage.getItem(\"todos\"));\n  //   const loadedTodoIds = JSON.parse(localStorage.getItem(\"todoId\"));\n  //   if (loadedTodos) {\n  //     setTodos(loadedTodos);\n  //     setTodoId(loadedTodoIds);\n  //   }\n  // }, []);\n  // useEffect(() => {\n  //   localStorage.setItem(\"todos\", JSON.stringify(todos));\n  //   localStorage.setItem(\"todoId\", JSON.stringify(todoId));\n  // }, [todos, todoId]);\n  // const addTodo = (e) => {\n  //   e.preventDefault();\n  //   if (!input || /^\\s*$/.test(input)) {\n  //     return;\n  //   }\n  //   const newTodo = {\n  //     id: todoId,\n  //     text: input,\n  //     completed: false,\n  //     tmpRef: \"ref\" + todoId,\n  //   };\n  //   setTodoId(todoId + 1);\n  //   setTodos([...todos].concat(newTodo));\n  //   console.log(\"Added Todo\" + input);\n  //   setInput(\"\");\n  // };\n  // const deleteTodo = (id) => {\n  //   const updatedTodos = [...todos].filter((todo) => todo.id !== id);\n  //   setTodos(updatedTodos);\n  //   console.log(\"Deleted Todo\");\n  // };\n  // const toggleComplete = (id) => {\n  //   const updatedTodos = [...todos].map((todo) => {\n  //     if (todo.id === id) {\n  //       todo.completed = !todo.completed;\n  //     }\n  //     return todo;\n  //   });\n  //   setTodos(updatedTodos);\n  // };\n  // const submitEdit = (e, id) => {\n  //   e.preventDefault();\n  //   const updatedTodos = [...todos].map((todo) => {\n  //     if (todo.id === id) {\n  //       todo.text = editingText;\n  //     }\n  //     return todo;\n  //   });\n  //   setTodos(updatedTodos);\n  //   setEditTodo(null);\n  //   setEditingText(\"\");\n  // };\n  // const clearTodos = () => {\n  //   setTodos([]);\n  //   setTodoId(0);\n  //   inputRef.current.focus();\n  // };\n  // return (\n  //   <div className=\"todo-app\">\n  //     <div className=\"app-title\">What's the Plan for Today?</div>\n  //     <form onSubmit={addTodo}>\n  //       <div className=\"add-todo\">\n  //         <label htmlFor=\"todo-input\" className=\"input-label\">\n  //           Add your <u>To-Do</u> item:\n  //         </label>\n  //         <input\n  //           className=\"add-todo-input\"\n  //           name=\"todo-input\"\n  //           type=\"text\"\n  //           placeholder=\"ex: vacuum living room\"\n  //           onChange={(e) => setInput(e.target.value)}\n  //           value={input}\n  //           ref={focus ? inputRef : null}\n  //         />\n  //         <button type=\"submit\" className=\"add-todo-button\">\n  //           Add To-Do\n  //         </button>\n  //       </div>\n  //     </form>\n  //     {todos.map((todo) => (\n  //       <Todo\n  //         key={todo.id}\n  //         todos={todos}\n  //         todo={todo}\n  //         toggleComplete={toggleComplete}\n  //         submitEdit={submitEdit}\n  //         deleteTodo={deleteTodo}\n  //         setET={setET}\n  //         editingText={editingText}\n  //         setEditTodo={setEditTodo}\n  //         editTodo={editTodo}\n  //         focus={focus}\n  //         setFocus={setFocus}\n  //       />\n  //     ))}\n  //     <div onClick={clearTodos} className=\"clear-button\">\n  //       Clear Entire To-Do List\n  //     </div>\n  //   </div>\n  // );\n};\n\n_c = TodoApp;\nexport default TodoApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoApp\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Applications/Web Dev/React Projects/react-todo/src/components/TodoApp.js"],"names":["React","useState","useEffect","useRef","TodoApp"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,wBAAP;;AAEA,MAAMC,OAAO,GAAG,MAAM,CACpgIN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../styles/todo-app.css\";\r\n\r\nconst TodoApp = () => {\r\n  // const [input, setInput] = useState(\"\");\r\n  // const [todos, setTodos] = useState([]);\r\n  // const [todoId, setTodoId] = useState(0);\r\n  // const [editTodo, setEditTodo] = useState(null);\r\n  // const [editingText, setEditingText] = useState(\"\");\r\n  // const [focus, setFocus] = useState(true);\r\n  // const inputRef = useRef(null);\r\n  // console.log(inputRef);\r\n  // useEffect(() => {\r\n  //   if (todos.length > 20) {\r\n  //     alert(\r\n  //       \"WOW! You have a lot on your plate... Thx for testing out my App :)\"\r\n  //     );\r\n  //   }\r\n  // });\r\n  // useEffect(() => {\r\n  //   if (focus === true) inputRef.current.focus();\r\n  // });\r\n  // //text from Child\r\n  // const setET = (text) => {\r\n  //   setEditingText(text);\r\n  // };\r\n  // useEffect(() => {\r\n  //   console.log(\"componentDidMount\");\r\n  //   const loadedTodos = JSON.parse(localStorage.getItem(\"todos\"));\r\n  //   const loadedTodoIds = JSON.parse(localStorage.getItem(\"todoId\"));\r\n  //   if (loadedTodos) {\r\n  //     setTodos(loadedTodos);\r\n  //     setTodoId(loadedTodoIds);\r\n  //   }\r\n  // }, []);\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  //   localStorage.setItem(\"todoId\", JSON.stringify(todoId));\r\n  // }, [todos, todoId]);\r\n  // const addTodo = (e) => {\r\n  //   e.preventDefault();\r\n  //   if (!input || /^\\s*$/.test(input)) {\r\n  //     return;\r\n  //   }\r\n  //   const newTodo = {\r\n  //     id: todoId,\r\n  //     text: input,\r\n  //     completed: false,\r\n  //     tmpRef: \"ref\" + todoId,\r\n  //   };\r\n  //   setTodoId(todoId + 1);\r\n  //   setTodos([...todos].concat(newTodo));\r\n  //   console.log(\"Added Todo\" + input);\r\n  //   setInput(\"\");\r\n  // };\r\n  // const deleteTodo = (id) => {\r\n  //   const updatedTodos = [...todos].filter((todo) => todo.id !== id);\r\n  //   setTodos(updatedTodos);\r\n  //   console.log(\"Deleted Todo\");\r\n  // };\r\n  // const toggleComplete = (id) => {\r\n  //   const updatedTodos = [...todos].map((todo) => {\r\n  //     if (todo.id === id) {\r\n  //       todo.completed = !todo.completed;\r\n  //     }\r\n  //     return todo;\r\n  //   });\r\n  //   setTodos(updatedTodos);\r\n  // };\r\n  // const submitEdit = (e, id) => {\r\n  //   e.preventDefault();\r\n  //   const updatedTodos = [...todos].map((todo) => {\r\n  //     if (todo.id === id) {\r\n  //       todo.text = editingText;\r\n  //     }\r\n  //     return todo;\r\n  //   });\r\n  //   setTodos(updatedTodos);\r\n  //   setEditTodo(null);\r\n  //   setEditingText(\"\");\r\n  // };\r\n  // const clearTodos = () => {\r\n  //   setTodos([]);\r\n  //   setTodoId(0);\r\n  //   inputRef.current.focus();\r\n  // };\r\n  // return (\r\n  //   <div className=\"todo-app\">\r\n  //     <div className=\"app-title\">What's the Plan for Today?</div>\r\n  //     <form onSubmit={addTodo}>\r\n  //       <div className=\"add-todo\">\r\n  //         <label htmlFor=\"todo-input\" className=\"input-label\">\r\n  //           Add your <u>To-Do</u> item:\r\n  //         </label>\r\n  //         <input\r\n  //           className=\"add-todo-input\"\r\n  //           name=\"todo-input\"\r\n  //           type=\"text\"\r\n  //           placeholder=\"ex: vacuum living room\"\r\n  //           onChange={(e) => setInput(e.target.value)}\r\n  //           value={input}\r\n  //           ref={focus ? inputRef : null}\r\n  //         />\r\n  //         <button type=\"submit\" className=\"add-todo-button\">\r\n  //           Add To-Do\r\n  //         </button>\r\n  //       </div>\r\n  //     </form>\r\n  //     {todos.map((todo) => (\r\n  //       <Todo\r\n  //         key={todo.id}\r\n  //         todos={todos}\r\n  //         todo={todo}\r\n  //         toggleComplete={toggleComplete}\r\n  //         submitEdit={submitEdit}\r\n  //         deleteTodo={deleteTodo}\r\n  //         setET={setET}\r\n  //         editingText={editingText}\r\n  //         setEditTodo={setEditTodo}\r\n  //         editTodo={editTodo}\r\n  //         focus={focus}\r\n  //         setFocus={setFocus}\r\n  //       />\r\n  //     ))}\r\n  //     <div onClick={clearTodos} className=\"clear-button\">\r\n  //       Clear Entire To-Do List\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n};\r\n\r\nexport default TodoApp;\r\n"]},"metadata":{},"sourceType":"module"}