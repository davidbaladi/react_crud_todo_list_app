{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Applications\\\\Web Dev\\\\React Projects\\\\react-todo\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Todo from \"./Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [editTodo, setEditTodo] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n  const [refState, setRefState] = useState(\"input\");\n  const [todoId, setTodoId] = useState(0);\n  const [isEditing, setIsEditing] = useState(false);\n  console.log(isEditing);\n  useEffect(() => {\n    const loadedTodos = JSON.parse(localStorage.getItem(\"todos\"));\n    const loadedTodoIds = JSON.parse(localStorage.getItem(\"todoId\"));\n\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n      setTodoId(loadedTodoIds);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n    localStorage.setItem(\"todoId\", JSON.stringify(todoId));\n  }, [todos, todoId]);\n  const inputRef = useRef(null);\n  const editRef = useRef(null);\n  useEffect(() => {\n    if (refState === \"input\") {\n      inputRef.current.focus();\n    } else {\n      editRef.current.focus();\n    }\n  }, [refState]);\n\n  const addTodo = e => {\n    e.preventDefault();\n    const newTodo = {\n      id: todoId,\n      text: input,\n      completed: false\n    };\n    setTodoId(todoId + 1);\n    setTodos([...todos].concat(newTodo));\n    setInput(\"\");\n  };\n\n  const deleteTodo = id => {\n    const updatedTodos = [...todos].filter(todo => todo.id !== id);\n    setTodos(updatedTodos);\n  };\n\n  const toggleComplete = id => {\n    const updatedTodos = [...todos].map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  const submitEdit = id => {\n    const updatedTodos = [...todos].map(todo => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setEditTodo(null);\n    setEditingText(\"\");\n    setIsEditing(false);\n  };\n\n  const clearTodos = () => {\n    setTodos([]);\n    setTodoId(0);\n    inputRef.current.focus();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addTodo,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"todo-input\",\n        className: \"form-label\",\n        children: [\"Add your \", /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"To-Do\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 20\n        }, this), \" item:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"todo-input\",\n        name: \"todo-input\",\n        type: \"text\",\n        placeholder: \"Enter Text Here!\",\n        onChange: e => setInput(e.target.value),\n        value: input,\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add To-Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), todos.map(todo => editTodo !== todo.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [todo.text, todo.id, /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: () => toggleComplete(todo.id),\n        checked: todo.completed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setEditTodo(todo.id);\n          setRefState(\"edit\");\n          setIsEditing(true);\n        },\n        children: \"Edit To-Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deleteTodo(todo.id),\n        children: \"Delete To-Do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setEditingText(e.target.value),\n        value: editingText,\n        ref: editRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: isEditing ? \"submit\" : null,\n        onClick: () => {\n          submitEdit(todo.id);\n          setRefState(\"input\");\n        },\n        children: \"Submit Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearTodos,\n      children: \"Clear Entire To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"h+nPlTYahk8Rj7OKkvwjHzBA6Jk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Applications/Web Dev/React Projects/react-todo/src/App.js"],"names":["React","useState","useEffect","useRef","Todo","App","todos","setTodos","input","setInput","editTodo","setEditTodo","editingText","setEditingText","refState","setRefState","todoId","setTodoId","isEditing","setIsEditing","console","log","loadedTodos","JSON","parse","localStorage","getItem","loadedTodoIds","setItem","stringify","inputRef","editRef","current","focus","addTodo","e","preventDefault","newTodo","id","text","completed","concat","deleteTodo","updatedTodos","filter","todo","toggleComplete","map","submitEdit","clearTodos","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst App = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [editTodo, setEditTodo] = useState(null);\r\n  const [editingText, setEditingText] = useState(\"\");\r\n  const [refState, setRefState] = useState(\"input\");\r\n  const [todoId, setTodoId] = useState(0);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  console.log(isEditing);\r\n\r\n  useEffect(() => {\r\n    const loadedTodos = JSON.parse(localStorage.getItem(\"todos\"));\r\n    const loadedTodoIds = JSON.parse(localStorage.getItem(\"todoId\"));\r\n    if (loadedTodos) {\r\n      setTodos(loadedTodos);\r\n      setTodoId(loadedTodoIds);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n    localStorage.setItem(\"todoId\", JSON.stringify(todoId));\r\n  }, [todos, todoId]);\r\n\r\n  const inputRef = useRef(null);\r\n  const editRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (refState === \"input\") {\r\n      inputRef.current.focus();\r\n    } else {\r\n      editRef.current.focus();\r\n    }\r\n  }, [refState]);\r\n\r\n  const addTodo = (e) => {\r\n    e.preventDefault();\r\n    const newTodo = {\r\n      id: todoId,\r\n      text: input,\r\n      completed: false,\r\n    };\r\n    setTodoId(todoId + 1);\r\n    setTodos([...todos].concat(newTodo));\r\n    setInput(\"\");\r\n  };\r\n\r\n  const deleteTodo = (id) => {\r\n    const updatedTodos = [...todos].filter((todo) => todo.id !== id);\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const toggleComplete = (id) => {\r\n    const updatedTodos = [...todos].map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.completed = !todo.completed;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const submitEdit = (id) => {\r\n    const updatedTodos = [...todos].map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.text = editingText;\r\n      }\r\n      return todo;\r\n    });\r\n\r\n    setTodos(updatedTodos);\r\n    setEditTodo(null);\r\n    setEditingText(\"\");\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const clearTodos = () => {\r\n    setTodos([]);\r\n    setTodoId(0);\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={addTodo}>\r\n        <label htmlFor=\"todo-input\" className=\"form-label\">\r\n          Add your <u>To-Do</u> item:\r\n        </label>\r\n\r\n        <input\r\n          className=\"todo-input\"\r\n          name=\"todo-input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter Text Here!\"\r\n          onChange={(e) => setInput(e.target.value)}\r\n          value={input}\r\n          ref={inputRef}\r\n        />\r\n        <button type=\"submit\">Add To-Do</button>\r\n      </form>\r\n\r\n      {todos.map((todo) =>\r\n        editTodo !== todo.id ? (\r\n          <div>\r\n            {todo.text}\r\n            {todo.id}\r\n            <input\r\n              type=\"checkbox\"\r\n              onChange={() => toggleComplete(todo.id)}\r\n              checked={todo.completed}\r\n            />\r\n            <button\r\n              onClick={() => {\r\n                setEditTodo(todo.id);\r\n                setRefState(\"edit\");\r\n                setIsEditing(true);\r\n              }}\r\n            >\r\n              Edit To-Do\r\n            </button>\r\n            <button onClick={() => deleteTodo(todo.id)}>Delete To-Do</button>\r\n          </div>\r\n        ) : (\r\n          <form>\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) => setEditingText(e.target.value)}\r\n              value={editingText}\r\n              ref={editRef}\r\n            />\r\n            <button\r\n              type={isEditing ? \"submit\" : null}\r\n              onClick={() => {\r\n                submitEdit(todo.id);\r\n                setRefState(\"input\");\r\n              }}\r\n            >\r\n              Submit Edit\r\n            </button>\r\n          </form>\r\n        )\r\n      )}\r\n      <button onClick={clearTodos}>Clear Entire To-Do List</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}